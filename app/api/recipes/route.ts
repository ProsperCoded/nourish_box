import { NextRequest, NextResponse } from "next/server";
import { adminDb } from "@/app/lib/firebase-admin";
import { Recipe } from "@/app/utils/types/recipe.type";
import { isAdmin } from "@/app/api/utils/authUtils";
import { FieldValue } from "firebase-admin/firestore";

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { userId, ...recipeData } = body;

    if (!userId) {
      return NextResponse.json(
        { success: false, message: "User ID is required for authorization." },
        { status: 401 }
      );
    }

    const userIsAdmin = await isAdmin(userId);
    if (!userIsAdmin) {
      return NextResponse.json(
        { success: false, message: "Forbidden: User does not have admin privileges." },
        { status: 403 }
      );
    }

    // Validate recipeData - basic check, add more comprehensive validation as needed
    if (!recipeData.name || !recipeData.description || !recipeData.displayMedia || !recipeData.displayMedia.url || !recipeData.displayMedia.publicId) {
      return NextResponse.json(
        { success: false, message: "Missing required recipe fields (name, description, displayMedia)." },
        { status: 400 }
      );
    }

    const newRecipe: Omit<Recipe, 'id' | 'image'> & { createdAt: FieldValue, updatedAt: FieldValue } = {
      ...recipeData,
      // Ensure all fields from Recipe type are handled, converting data types if necessary
      name: recipeData.name as string,
      description: recipeData.description as string,
      displayMedia: recipeData.displayMedia as { url: string; publicId: string; type: "image" | "video" },
      samples: recipeData.samples as { variant: string; media: { url: string; publicId: string; type: "image" | "video" } }[] || [],
      duration: Number(recipeData.duration) || 0,
      price: Number(recipeData.price) || 0,
      ingredients: Array.isArray(recipeData.ingredients) ? recipeData.ingredients : [],
      order: Number(recipeData.order) || 0,
      featured: Boolean(recipeData.featured) || false,
      clicks: 0, // Initialize clicks
      createdAt: FieldValue.serverTimestamp(),
      updatedAt: FieldValue.serverTimestamp(),
    };

    const recipesCollection = adminDb.collection("recipes");
    const docRef = await recipesCollection.add(newRecipe);

    // We don't need the StaticImageData `image` field from recipe.type.ts for Firestore storage
    // The `id` will be auto-generated by Firestore.

    return NextResponse.json(
      { 
        success: true, 
        message: "Recipe created successfully", 
        recipeId: docRef.id, 
        recipe: { id: docRef.id, ...newRecipe, createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() } // Approximate timestamps for immediate client use
      },
      { status: 201 }
    );

  } catch (error) {
    console.error("Create recipe error:", error);
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred";
    return NextResponse.json(
      { success: false, message: "Error creating recipe.", error: errorMessage },
      { status: 500 }
    );
  }
}

// You can also implement a GET method here to fetch all recipes if needed in the future.
export async function GET(request: NextRequest) {
  try {
    const recipesSnapshot = await adminDb.collection("recipes").orderBy("order").orderBy("createdAt", "desc").get();
    const recipes = recipesSnapshot.docs.map(doc => {
      const data = doc.data();
      // Perform a safer conversion to Recipe type
      const recipe: Recipe = {
        id: doc.id,
        name: data.name || "",
        description: data.description || "",
        displayMedia: data.displayMedia || { url: "", publicId: "", type: "image" }, // Provide default for displayMedia
        samples: data.samples || [],
        duration: data.duration || 0,
        price: data.price || 0,
        ingredients: data.ingredients || [],
        order: data.order || 0,
        featured: data.featured || false,
        clicks: data.clicks || 0,
        createdAt: data.createdAt?.toDate().toISOString() || new Date(0).toISOString(), // Default to epoch if undefined
        updatedAt: data.updatedAt?.toDate().toISOString() || new Date(0).toISOString(), // Default to epoch if undefined
      };
      return recipe;
    });
    return NextResponse.json({ success: true, recipes });
  } catch (error) {
    console.error("Fetch recipes error:", error);
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred";
    return NextResponse.json(
      { success: false, message: "Error fetching recipes.", error: errorMessage },
      { status: 500 }
    );
  }
} 